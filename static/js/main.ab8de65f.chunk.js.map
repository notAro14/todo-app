{"version":3,"sources":["utils/index.js","hooks/useLocalStorage.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["normalize","str","split","map","x","toLowerCase","join","useLocalStorageState","key","defaultValue","serialize","JSON","stringify","deserialize","parse","React","useState","valueInLocalStorage","window","localStorage","getItem","error","removeItem","state","setState","prevKeyRef","useRef","useEffect","prevKey","current","setItem","useStyles","makeStyles","theme","root","padding","spacing","marginTop","marginBottom","noTask","markedTask","textDecoration","TodoList","initialTasks","classes","tasks","setTasks","checked","setChecked","duplicateAlert","setDuplicateAlert","incomingTask","setIncomingTask","Box","onSubmit","event","preventDefault","length","find","task","setTimeout","prev","TextField","fullWidth","value","onChange","target","label","role","Typography","component","variant","color","Paper","elevation","className","List","id","ListItem","onClick","currentIndex","indexOf","newChecked","push","splice","dense","divider","button","ListItemText","primary","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","Button","disabled","startIcon","newTasks","filter","includes","App","props","CssBaseline","Container","maxWidth","align","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ab8de65f.chunk.js","sourcesContent":["export function normalize(str) {\r\n  return str\r\n    .split(\" \")\r\n    .map((x) => x.toLowerCase())\r\n    .join(\"-\");\r\n}\r\n","import React from \"react\";\r\n\r\nexport function useLocalStorageState(\r\n  key,\r\n  defaultValue = \"\",\r\n  { serialize = JSON.stringify, deserialize = JSON.parse } = {}\r\n) {\r\n  const [state, setState] = React.useState(() => {\r\n    const valueInLocalStorage = window.localStorage.getItem(key);\r\n    if (valueInLocalStorage) {\r\n      // the try/catch is here in case the localStorage value was set before\r\n      // we had the serialization in place (like we do in previous extra credits)\r\n      try {\r\n        return deserialize(valueInLocalStorage);\r\n      } catch (error) {\r\n        window.localStorage.removeItem(key);\r\n      }\r\n    }\r\n    return typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\r\n  });\r\n\r\n  const prevKeyRef = React.useRef(key);\r\n\r\n  React.useEffect(() => {\r\n    const prevKey = prevKeyRef.current;\r\n    if (prevKey !== key) {\r\n      window.localStorage.removeItem(prevKey);\r\n    }\r\n    prevKeyRef.current = key;\r\n    window.localStorage.setItem(key, serialize(state));\r\n  }, [key, state, serialize]);\r\n\r\n  return [state, setState];\r\n}\r\n","// react\r\nimport React from \"react\";\r\n\r\n// material-ui\r\nimport {\r\n  TextField,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Checkbox,\r\n  List,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// custom\r\nimport { normalize } from \"../utils/index\";\r\nimport { useLocalStorageState } from \"../hooks/useLocalStorage\";\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(1),\r\n    marginTop: theme.spacing(5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  noTask: {\r\n    marginTop: theme.spacing(5),\r\n  },\r\n  markedTask: {\r\n    textDecoration: \"line-through\",\r\n  },\r\n}));\r\n\r\n// main\r\nexport function TodoList({ initialTasks = [] }) {\r\n  const classes = useStyles();\r\n\r\n  // UNCOMMENT TO USE NORMAL STATE\r\n  // const [tasks, setTasks] = React.useState(initialTasks);\r\n  // const [checked, setChecked] = React.useState([]);\r\n\r\n  const [tasks, setTasks] = useLocalStorageState(\"todoism:tasks\", []);\r\n  const [checked, setChecked] = useLocalStorageState(\r\n    \"todoism:checked-tasks\",\r\n    []\r\n  );\r\n\r\n  const [duplicateAlert, setDuplicateAlert] = React.useState(false);\r\n  const [incomingTask, setIncomingTask] = React.useState(\"\");\r\n\r\n  function handleChange(event) {\r\n    setIncomingTask(event.target.value);\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (incomingTask.length === 0) return;\r\n    if (tasks.find(({ task }) => normalize(task) === normalize(incomingTask))) {\r\n      setDuplicateAlert(true);\r\n      setIncomingTask(\"\");\r\n      setTimeout(() => {\r\n        setDuplicateAlert(false);\r\n      }, 2000);\r\n      return;\r\n    }\r\n    setTasks((prev) => [...prev, { task: incomingTask }]);\r\n    setIncomingTask(\"\");\r\n  }\r\n\r\n  function handleToggle(value) {\r\n    return (event) => {\r\n      const currentIndex = checked.indexOf(value);\r\n      const newChecked = [...checked];\r\n      if (currentIndex === -1) {\r\n        newChecked.push(value);\r\n      } else {\r\n        newChecked.splice(currentIndex, 1);\r\n      }\r\n      setChecked(newChecked);\r\n    };\r\n  }\r\n\r\n  function deleteMarkedTask() {\r\n    const newTasks = tasks.filter(\r\n      ({ task }) => !checked.includes(normalize(task))\r\n    );\r\n    setTasks(newTasks);\r\n    setChecked([]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box>\r\n        <form onSubmit={handleSubmit}>\r\n          <TextField\r\n            fullWidth\r\n            value={incomingTask}\r\n            onChange={handleChange}\r\n            label=\"Enter a task\"\r\n          />\r\n        </form>\r\n        {duplicateAlert && (\r\n          <div role=\"alert\">\r\n            <Typography component=\"p\" variant=\"caption\" color=\"error\">\r\n              Task already entered.\r\n            </Typography>\r\n          </div>\r\n        )}\r\n      </Box>\r\n      {tasks.length ? (\r\n        <Box>\r\n          <Paper elevation={1} className={classes.root}>\r\n            <List>\r\n              {tasks.map(({ task }) => {\r\n                const id = normalize(task);\r\n                return (\r\n                  <ListItem\r\n                    onClick={handleToggle(id)}\r\n                    key={id}\r\n                    dense\r\n                    divider={tasks.length > 1}\r\n                    button\r\n                  >\r\n                    <ListItemText\r\n                      className={\r\n                        checked.indexOf(id) !== -1 ? classes.markedTask : \"\"\r\n                      }\r\n                      primary={task}\r\n                    />\r\n                    <ListItemIcon>\r\n                      <Checkbox\r\n                        color=\"primary\"\r\n                        edge=\"end\"\r\n                        checked={checked.indexOf(id) !== -1}\r\n                        tabIndex={-1}\r\n                        disableRipple\r\n                        inputProps={{\r\n                          \"aria-label\":\r\n                            \"checkbox for markin a task as completed\",\r\n                        }}\r\n                      />\r\n                    </ListItemIcon>\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </Paper>\r\n          <Button\r\n            disabled={checked.length === 0}\r\n            variant=\"outlined\"\r\n            startIcon={<DeleteIcon />}\r\n            color=\"secondary\"\r\n            onClick={deleteMarkedTask}\r\n          >\r\n            Delete all marked task\r\n          </Button>\r\n        </Box>\r\n      ) : (\r\n        <Typography\r\n          className={classes.noTask}\r\n          component=\"p\"\r\n          color=\"textSecondary\"\r\n          variant=\"h6\"\r\n        >\r\n          No tasks left. You are doing great.\r\n        </Typography>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { TodoList } from \"./components/TodoList\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\n\nexport default function App(props) {\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Box component=\"div\">\n          <Typography\n            component=\"h1\"\n            variant=\"h3\"\n            color=\"primary\"\n            align=\"center\"\n          >\n            Todoism\n          </Typography>\n        </Box>\n        <TodoList />\n      </Container>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}